{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/ScoreKeeper/ScoreKeeper.js","components/GameContainer/GameContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","className","ScoreKeeper","props","key","id","onClick","handleClick","clicked","name","src","image","alt","GameContainer","state","images","message","score","topScore","imageOrder","forEach","index","setState","sort","Math","random","newScore","newTopScore","this","map","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.25854ff5.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Jumbotron.css\";\r\n\r\n\r\nconst Jumbotron = () => (\r\n<div className=\"jumbotron jumbotron-fluid\">\r\n  <div className=\"container text-center\">\r\n    <h1 className=\"display-4\">React Clicky Game!</h1>\r\n    <p className=\"lead\">Click on any image to earn points, but don't click on any more than once!</p>\r\n  </div>\r\n</div>\r\n);\r\nexport default Jumbotron;","import React from 'react';\r\nimport \"./ScoreKeeper.css\";\r\n\r\nconst ScoreKeeper = props => (\r\n\t<div \r\n\tclassName=\"allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\" \r\n\tkey={props.id}\r\n\tonClick={() => props.handleClick(props.id, props.clicked)}\r\n\t>\r\n\t\t<img \r\n\t\tid={props.name}\r\n\t\tsrc={props.image}\r\n\t\talt={props.name}\r\n\t\t/>\r\n\t</div>\r\n);\r\n\r\nexport default ScoreKeeper;","import React, { Component } from 'react';\r\nimport MemoryCard from '../ScoreKeeper';\r\nimport images from \"../../images.json\";\r\nimport \"./GameContainer.css\";\r\n\r\nclass GameContainer extends Component {\r\n\tstate = {\r\n\t\timages,\r\n\t\tmessage: \"Click one of the logos to begin!\",\r\n\t\tscore: 0,\r\n\t\ttopScore: 0\r\n\t};\r\n\t\r\n\thandleClick = (id, clicked) => {\r\n\r\n\t\tconst imageOrder = this.state.images;\r\n\r\n\t\tif (clicked) {\r\n\t\t\timageOrder.forEach((image, index) => {\r\n\t\t\t\timageOrder[index].clicked = false;\r\n\t\t\t});\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"You Guessed Incorrectly!\",\r\n\t\t\t\tscore: 0\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\timageOrder.forEach((image, index) => {\r\n\t\t\t\tif (id === image.id) {\r\n\t\t\t\t\timageOrder[index].clicked = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst { topScore, score } = this.state;\r\n\t\t\tconst newScore = score + 1;\r\n\t\t\tconst newTopScore = newScore > topScore ? newScore : topScore;\r\n\r\n\t\t\treturn this.setState({\r\n\t\t\t\timage: imageOrder.sort(() => Math.random() - 0.5),\r\n\t\t\t\tmessage: \"You Guessed Correctly!\",\r\n\t\t\t\tscore: newScore,\r\n\t\t\t\ttopScore: newTopScore,\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container-fluid mainCardContainer\">\r\n\t\t\t<div className=\"gameMessage text-center\">\r\n\t\t\t\t\t\t<p>{this.state.message}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"gameScores text-center\">\r\n\t\t\t\t\t\t<p>Score: {this.state.score} | Top Score: {this.state.topScore}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t{this.state.images.map(image => (\r\n\t\t\t\t\t\t<MemoryCard\r\n\t\t\t\t\t\t\tkey={image.id}\r\n\t\t\t\t\t\t\tid={image.id}\r\n\t\t\t\t\t\t\tname={image.name}\r\n\t\t\t\t\t\t\tclicked={image.clicked}\r\n\t\t\t\t\t\t\timage={image.image}\r\n\t\t\t\t\t\t\thandleClick={this.handleClick}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default GameContainer;","import React from \"react\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport MainGameContainer from \"./components/GameContainer\";\r\nimport \"./App.css\";\r\n\r\n\r\nconst App = () => (\r\n  <div className=\"container-fluid mainContainer\">\r\n    <Jumbotron />\r\n    <MainGameContainer /> \r\n  </div>\r\n);\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}